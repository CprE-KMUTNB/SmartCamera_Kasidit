[
    {
        "id": "34281662102cb5c8",
        "type": "tab",
        "label": "Camera",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "fec742dce62fa2ae",
        "type": "group",
        "z": "34281662102cb5c8",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "d47fdb3133d3a8e1",
            "073ca7d2ef0a4afa",
            "5f4329af7f1c1137",
            "e487e277334e2cc1",
            "6ba1b9b88f09a015",
            "f15579ccb52e1fe7",
            "d76c66830c43f241",
            "f473c6ff65fea12c"
        ],
        "x": 714,
        "y": 539,
        "w": 552,
        "h": 322
    },
    {
        "id": "cefcb0683cd6bfad",
        "type": "group",
        "z": "34281662102cb5c8",
        "g": "adf09ee18b9bbecd",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "3b11c658ade27748",
            "6130dd9d9fd4b0db"
        ],
        "x": 714,
        "y": 139,
        "w": 272,
        "h": 122
    },
    {
        "id": "adf09ee18b9bbecd",
        "type": "group",
        "z": "34281662102cb5c8",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "c5521fba3b265d17",
            "20696b087845ca6d",
            "f3036363b7531aa2",
            "c543de0de48be6bf",
            "ad530945fc6d92ca",
            "e3dc28a932de9119",
            "21b222455b9bb761",
            "e78a159de7ef6b7d",
            "ba2c7433987290d5",
            "7e2465433450cad7",
            "423d736fa0e65409",
            "c06ef1ae14ad7680",
            "4c1808ff063346ef",
            "cefcb0683cd6bfad",
            "d6737a31d01efee0",
            "90cfd9a865c5b6d8",
            "4e8ea023ad79ed60"
        ],
        "x": 688,
        "y": 79,
        "w": 1058,
        "h": 342
    },
    {
        "id": "5f17d2b13ec346b4",
        "type": "ui_group",
        "name": "Camera",
        "tab": "188fa8dec02ee47e",
        "order": 2,
        "disp": false,
        "width": "6",
        "collapse": false,
        "className": "fullsize"
    },
    {
        "id": "0f21ae4a25d31ad9",
        "type": "ui_group",
        "name": "On/Off",
        "tab": "7ec7a974733d3118",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "600ec557567f876d",
        "type": "mqtt-broker",
        "name": "",
        "broker": "127.0.0.1",
        "port": "1883",
        "clientid": "node_red_client",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "536d928d0435de29",
        "type": "ui_group",
        "name": "Status",
        "tab": "188fa8dec02ee47e",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": "status-box"
    },
    {
        "id": "7c3b27e67c54ed89",
        "type": "ui_group",
        "name": "Camera",
        "tab": "7b29b4a8d5f4e3e9",
        "order": 1,
        "disp": true,
        "width": "12",
        "collapse": false,
        "className": "fullsize"
    },
    {
        "id": "188fa8dec02ee47e",
        "type": "ui_tab",
        "name": "Camera",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "7ec7a974733d3118",
        "type": "ui_tab",
        "name": "LED",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "7b29b4a8d5f4e3e9",
        "type": "ui_tab",
        "name": "Settings",
        "icon": "mi-settings",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "09e13d4eb1997158",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "0dbe13712fdc5437",
        "type": "ui_group",
        "name": "Node-RED",
        "tab": "7b29b4a8d5f4e3e9",
        "order": 2,
        "disp": true,
        "width": "12",
        "collapse": false,
        "className": "fullsize"
    },
    {
        "id": "c5521fba3b265d17",
        "type": "ui_template",
        "z": "34281662102cb5c8",
        "g": "adf09ee18b9bbecd",
        "group": "5f17d2b13ec346b4",
        "name": "StreamViewer",
        "order": 0,
        "width": "0",
        "height": "0",
        "format": "<div ng-bind-html=\"msg.payload\"></div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1600,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "3b11c658ade27748",
        "type": "ui_template",
        "z": "34281662102cb5c8",
        "g": "cefcb0683cd6bfad",
        "group": "0f21ae4a25d31ad9",
        "name": "Style",
        "order": 1,
        "width": 0,
        "height": 0,
        "format": "<style>\n    #nr-dashboard > md-content > section > md-content {\n        overflow: clip;\n    }\n    .fullsize {\n        width: 100vw !important;              \n        margin: auto;\n        height: 50vh !important;\n    }\n    .fullsize > div {\n        width: 100% !important;\n        height: 100% !important;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n    }\n    .fullsize md-card {\n        width: 100% !important;\n        height: 100% !important;\n        overflow: hidden;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n    }\n    .status-box {\n        width: 75% !important;\n        max-height: 10rem;\n        overflow-y: clip;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        z-index: 10;\n        border: 1px solid #ccc!important;\n        border-radius: 16px;\n        flex-direction: row!important;\n        margin: 0 auto;        \n    }\n    #Camera_Status {\n        position: static!important;\n    }\n    #Camera_Status > div > p {\n        font-size: 32px;\n        width: auto!important;\n        max-height: none!important;\n    }\n    #Camera_Status_cards {\n        width: 100% !important;\n        height: 100% !important;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        flex-grow: 3;\n    }\n    *:has(> .status-text) {\n        width: 100% !important;\n        height: 100% !important;\n    }\n    .status-text {\n        text-align: center;\n        width: 100% !important;\n        font-size: 32px;\n        position: static!important;\n        display: flex;\n        flex-direction: column;\n        justify-content: space-between;\n    }    \n    progress {\n        width: 100%;\n    }\n\n    p.value {\n        width: 350px;\n        text-overflow: ellipsis;\n        max-height: 3rem;\n        overflow:hidden;\n        white-space:nowrap;\n        text-align: center;\n    }\n\n    #Settings_Node-RED > div {\n        max-width: 50%;\n    }\n    #Settings_Node-RED md-card {\n        height: auto!important;\n    }\n    .fullheight {\n        height: 100% !important;\n    }\n</style>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "global",
        "className": "",
        "x": 790,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "6130dd9d9fd4b0db",
        "type": "comment",
        "z": "34281662102cb5c8",
        "g": "cefcb0683cd6bfad",
        "name": "Used to style dashboard",
        "info": "",
        "x": 850,
        "y": 180,
        "wires": []
    },
    {
        "id": "20696b087845ca6d",
        "type": "function",
        "z": "34281662102cb5c8",
        "g": "adf09ee18b9bbecd",
        "name": "Base64ToImg",
        "func": "// msg.payload = msg.payload.toString('base64');\n\nmsg.payload = `<img alt=\"stream\" src=\"data:image/jpg;base64,${msg.payload}\" />`\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1293.3333333333333,
        "y": 380,
        "wires": [
            [
                "c5521fba3b265d17"
            ]
        ]
    },
    {
        "id": "d47fdb3133d3a8e1",
        "type": "function",
        "z": "34281662102cb5c8",
        "g": "fec742dce62fa2ae",
        "name": "ToggleState",
        "func": "if (msg.payload != 1) return;\n\nlet state = context.get('state');\nif (typeof state == 'undefined') {\n    state = false;\n}\n\nstate = !state;\n\ncontext.set('state', state);\n\nmsg.payload = {\n    state: state ? \"ON\" : \"OFF\"\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 660,
        "wires": [
            [
                "073ca7d2ef0a4afa",
                "e487e277334e2cc1"
            ]
        ]
    },
    {
        "id": "073ca7d2ef0a4afa",
        "type": "mqtt out",
        "z": "34281662102cb5c8",
        "g": "fec742dce62fa2ae",
        "name": "MQTT OUT",
        "topic": "zigbee2mqtt/0xa4c138c1aabb0153/set",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "600ec557567f876d",
        "x": 1150,
        "y": 660,
        "wires": []
    },
    {
        "id": "5f4329af7f1c1137",
        "type": "delay",
        "z": "34281662102cb5c8",
        "g": "fec742dce62fa2ae",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 830,
        "y": 660,
        "wires": [
            [
                "d47fdb3133d3a8e1"
            ]
        ]
    },
    {
        "id": "e487e277334e2cc1",
        "type": "debug",
        "z": "34281662102cb5c8",
        "g": "fec742dce62fa2ae",
        "name": "debug 6",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1160,
        "y": 600,
        "wires": []
    },
    {
        "id": "f15579ccb52e1fe7",
        "type": "mqtt in",
        "z": "34281662102cb5c8",
        "g": "fec742dce62fa2ae",
        "name": "",
        "topic": "#",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "600ec557567f876d",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 810,
        "y": 740,
        "wires": [
            [
                "d76c66830c43f241"
            ]
        ]
    },
    {
        "id": "d76c66830c43f241",
        "type": "debug",
        "z": "34281662102cb5c8",
        "g": "fec742dce62fa2ae",
        "name": "debug 7",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 970,
        "y": 740,
        "wires": []
    },
    {
        "id": "6ba1b9b88f09a015",
        "type": "function",
        "z": "34281662102cb5c8",
        "g": "fec742dce62fa2ae",
        "name": "FingersControl",
        "func": "/* \nStates Defined :\n-1 : No Hand Found\n0 : Ready For Command\n1\n2\n3\n4\n5\n*/\nconst timeToWait = flow.get(\"timeToWait\") ?? 1000; // Milliseconds\n\n// Initialization\nlet [lastState, lastTime, lastPayload] = context.get([\"lastState\", \"lastTime\", \"lastPayload\"]);\nlet currentState;\nswitch(msg.payload.join(' ')) {\n    case \"\":\n        currentState = -1;\n        break;\n    case \"0 0 0 0 0\":\n        currentState = 0;\n        break;\n    case \"0 1 0 0 0\":\n        currentState = 1;\n        break;\n    case \"0 1 1 0 0\":\n        currentState = 2;\n        break;\n    case \"0 1 1 1 0\":\n        currentState = 3;\n        break;\n    case \"0 1 1 1 1\":\n        currentState = 4;\n        break;\n    case \"1 1 1 1 1\":\n        currentState = 5;\n        break;\n    default:\n        currentState = -2;\n}\n/*\n1 - Dashboard Message\n2 - Command Out\n*/\nvar msg1, msg2;\n\nfunction isReady() {\n    if (typeof lastTime == 'undefined') {\n        if (lastState != currentState) {\n            msg1 = {\n                payload: \"Put your fingers down\"\n            }\n        }\n        return false;\n    }\n    let elaspedTime = Date.now() - lastTime;\n    let timeOver = elaspedTime >= timeToWait;\n    if (!timeOver) {\n        if (!lastPayload.every((v, i) => v === msg.payload[i])) {\n            lastTime = Date.now();\n        }\n        msg1 = {\n            payload: `Sending Command ${currentState}...`,\n            progress: elaspedTime / timeToWait\n        }\n    }\n    return timeOver;\n}\n\n// State Check\nswitch(currentState)\n{\n    case -1:\n        msg1 = {\n            payload: \"No Hand Found\"\n        };\n        lastTime = undefined;\n        lastState = -1;\n        break;\n    case 0:\n        msg1 = {\n            payload: \"Ready for command\"\n        };\n        lastTime = Date.now();\n        lastState = 0;\n        break;\n    case 1:\n        if (!isReady()) break;\n        msg1 = {\n            payload: \"Command 1 Sent\"\n        };\n        msg2 = {\n            payload: 1\n        };\n        lastTime = undefined;\n        lastState = 1;\n        break;\n    case 2:\n        if (!isReady()) break;\n        msg1 = {\n            payload: \"Command 2 Sent\"\n        };\n        msg2 = {\n            payload: 2\n        };\n        lastTime = undefined;\n        lastState = 2;\n        break;\n    case 3:\n        if (!isReady()) break;\n        msg1 = {\n            payload: \"Command 3 Sent\"\n        };\n        msg2 = {\n            payload: 3\n        };\n        lastTime = undefined;\n        lastState = 3;\n        break;\n    case 4:\n        if (!isReady()) break;\n        msg1 = {\n            payload: \"Command 4 Sent\"\n        };\n        msg2 = {\n            payload: 4\n        };\n        lastTime = undefined;\n        lastState = 4;\n        break;\n    case 5:\n        if (!isReady()) break;\n        msg1 = {\n            payload: \"Command 5 Sent\"\n        };\n        msg2 = {\n            payload: 5\n        };\n        lastTime = undefined;\n        lastState = 5;\n        break;\n    default:\n        msg1 = {\n            payload: \"Command not set.\"\n        };\n}\n\n// Set context\ncontext.set([\"lastState\", \"lastTime\", \"lastPayload\"], [lastState, lastTime, msg.payload]);\n\nreturn [msg1, msg2];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 580,
        "wires": [
            [
                "21b222455b9bb761"
            ],
            [
                "5f4329af7f1c1137"
            ]
        ],
        "outputLabels": [
            "message",
            "command"
        ]
    },
    {
        "id": "f3036363b7531aa2",
        "type": "image",
        "z": "34281662102cb5c8",
        "g": "adf09ee18b9bbecd",
        "name": "",
        "width": 160,
        "data": "payload",
        "dataType": "msg",
        "thumbnail": false,
        "active": true,
        "pass": true,
        "outputs": 1,
        "x": 986.6666666666666,
        "y": 380,
        "wires": [
            [
                "20696b087845ca6d"
            ]
        ]
    },
    {
        "id": "970f65b786e9db2a",
        "type": "pythonshell in",
        "z": "34281662102cb5c8",
        "name": "OpenCV",
        "pyfile": "${PY_PATH}",
        "virtualenv": "${VENV_PATH}",
        "continuous": true,
        "stdInData": false,
        "x": 400,
        "y": 440,
        "wires": [
            [
                "2deacd47bbf49c7d"
            ]
        ]
    },
    {
        "id": "c543de0de48be6bf",
        "type": "comment",
        "z": "34281662102cb5c8",
        "g": "adf09ee18b9bbecd",
        "name": "Dashboard",
        "info": "",
        "x": 1660,
        "y": 120,
        "wires": []
    },
    {
        "id": "f473c6ff65fea12c",
        "type": "comment",
        "z": "34281662102cb5c8",
        "g": "fec742dce62fa2ae",
        "name": "Send commands to Zigbee via MQTT",
        "info": "",
        "x": 890,
        "y": 820,
        "wires": []
    },
    {
        "id": "e78a159de7ef6b7d",
        "type": "status",
        "z": "34281662102cb5c8",
        "g": "adf09ee18b9bbecd",
        "name": "PythonServerStatus",
        "scope": [
            "970f65b786e9db2a"
        ],
        "x": 1190,
        "y": 300,
        "wires": [
            [
                "d6737a31d01efee0"
            ]
        ]
    },
    {
        "id": "c06ef1ae14ad7680",
        "type": "inject",
        "z": "34281662102cb5c8",
        "g": "adf09ee18b9bbecd",
        "name": "StartScript",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.2",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1230,
        "y": 180,
        "wires": [
            [
                "423d736fa0e65409"
            ]
        ]
    },
    {
        "id": "2deacd47bbf49c7d",
        "type": "function",
        "z": "34281662102cb5c8",
        "name": "JSONParse",
        "func": "let { image, fingers } = JSON.parse(msg.payload);\n\nlet msg1 = {\n    payload: image\n};\nlet msg2 = {\n    payload: fingers\n};\n\nreturn [msg1, msg2];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 440,
        "wires": [
            [
                "f3036363b7531aa2"
            ],
            [
                "6ba1b9b88f09a015"
            ]
        ],
        "outputLabels": [
            "image",
            "fingers"
        ]
    },
    {
        "id": "ad530945fc6d92ca",
        "type": "ui_text",
        "z": "34281662102cb5c8",
        "g": "adf09ee18b9bbecd",
        "group": "536d928d0435de29",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Python Status",
        "format": "{{msg.status.text}}",
        "layout": "col-center",
        "className": "status-text fullheight",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1600,
        "y": 300,
        "wires": []
    },
    {
        "id": "e3dc28a932de9119",
        "type": "ui_template",
        "z": "34281662102cb5c8",
        "g": "adf09ee18b9bbecd",
        "group": "7c3b27e67c54ed89",
        "name": "CameraSettingsPage",
        "order": 0,
        "width": 0,
        "height": 0,
        "format": "<iframe height=\"100%\" width=\"100%\" src=\"http://192.168.1.200:80\"></iframe>",
        "storeOutMessages": true,
        "fwdInMessages": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1620,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "21b222455b9bb761",
        "type": "ui_template",
        "z": "34281662102cb5c8",
        "g": "adf09ee18b9bbecd",
        "group": "536d928d0435de29",
        "name": "Command Status",
        "order": 2,
        "width": 0,
        "height": 0,
        "format": "<label>{{msg.payload}}</label>\n<progress value={{msg.progress}} max=1></progress>",
        "storeOutMessages": true,
        "fwdInMessages": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "status-text",
        "x": 870,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "ba2c7433987290d5",
        "type": "function",
        "z": "34281662102cb5c8",
        "g": "adf09ee18b9bbecd",
        "name": "SetTimeToWait",
        "func": "flow.set(\"timeToWait\", msg.payload);\n\nreturn;",
        "outputs": 0,
        "timeout": 0,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nflow.set(\"timeToWait\", 3000);",
        "finalize": "",
        "libs": [],
        "x": 1600,
        "y": 220,
        "wires": []
    },
    {
        "id": "7e2465433450cad7",
        "type": "ui_numeric",
        "z": "34281662102cb5c8",
        "g": "adf09ee18b9bbecd",
        "name": "DelaySetting",
        "label": "Command Delay",
        "tooltip": "",
        "group": "0dbe13712fdc5437",
        "order": 3,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "command_delay",
        "topicType": "str",
        "format": "{{value/1000}} seconds",
        "min": "1000",
        "max": "3000",
        "step": "1000",
        "className": "",
        "x": 1430,
        "y": 220,
        "wires": [
            [
                "ba2c7433987290d5",
                "ca7bc64a0daf2905"
            ]
        ]
    },
    {
        "id": "4c1808ff063346ef",
        "type": "http request",
        "z": "34281662102cb5c8",
        "g": "adf09ee18b9bbecd",
        "name": "TriggerPythonScript",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://127.0.0.1:1880/pythonshell/970f65b786e9db2a",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1610,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "423d736fa0e65409",
        "type": "ui_button",
        "z": "34281662102cb5c8",
        "g": "adf09ee18b9bbecd",
        "name": "TogglePython",
        "group": "0dbe13712fdc5437",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "label": "Toggle Python Script",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 1413.3333333333335,
        "y": 180,
        "wires": [
            [
                "4c1808ff063346ef"
            ]
        ]
    },
    {
        "id": "d6737a31d01efee0",
        "type": "function",
        "z": "34281662102cb5c8",
        "g": "adf09ee18b9bbecd",
        "name": "FilterUndefinedStatus",
        "func": "msg.status.text = msg.status.text ?? \"Unavailable\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1400,
        "y": 300,
        "wires": [
            [
                "ad530945fc6d92ca",
                "90cfd9a865c5b6d8"
            ]
        ]
    },
    {
        "id": "90cfd9a865c5b6d8",
        "type": "ui_text",
        "z": "34281662102cb5c8",
        "g": "adf09ee18b9bbecd",
        "group": "0dbe13712fdc5437",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "Python Setting Status",
        "label": "Python Status",
        "format": "{{msg.status.text}}",
        "layout": "col-center",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": "16",
        "color": "#000000",
        "x": 1620,
        "y": 260,
        "wires": []
    },
    {
        "id": "526e661d622f01ca",
        "type": "file in",
        "z": "34281662102cb5c8",
        "name": "ReadSetiingsFile",
        "filename": "${PWD}/settings.conf",
        "filenameType": "env",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 2070,
        "y": 180,
        "wires": [
            [
                "d8c22badd89b81d2"
            ]
        ]
    },
    {
        "id": "9cc6e9bc89b2686f",
        "type": "debug",
        "z": "34281662102cb5c8",
        "name": "debug 8",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2400,
        "y": 180,
        "wires": []
    },
    {
        "id": "dca6c536c415a194",
        "type": "inject",
        "z": "34281662102cb5c8",
        "name": "GetConfig",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1890,
        "y": 180,
        "wires": [
            [
                "526e661d622f01ca"
            ]
        ]
    },
    {
        "id": "ffe8aa3a0e2699d5",
        "type": "file",
        "z": "34281662102cb5c8",
        "name": "WriteSettingsFile",
        "filename": "${PWD}/settings.conf",
        "filenameType": "env",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 2070,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "d8c22badd89b81d2",
        "type": "function",
        "z": "34281662102cb5c8",
        "name": "ParseConfig",
        "func": "const config = {};\nmsg.payload.split(\"\\n\").forEach((e) => {\n    if (e.length == 0) return;\n    const [key, value] = e.split(\"=\");\n    config[key] = value;\n});\nmsg.payload = config;\nflow.set(\"config\", config);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2250,
        "y": 180,
        "wires": [
            [
                "9cc6e9bc89b2686f"
            ]
        ]
    },
    {
        "id": "ca7bc64a0daf2905",
        "type": "function",
        "z": "34281662102cb5c8",
        "name": "SerializeConfig",
        "func": "var config = flow.get(\"config\");\nif (typeof config == 'undefined') return;\nconfig[msg.topic] = msg.payload;\n\n// Object to String\nvar parsedString = \"\"\nfor (const [key, value] of Object.entries(config)) {\n    parsedString += `${key}=${value}\\n`\n}\nmsg.payload = parsedString;\n\nflow.set(\"config\", config);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1880,
        "y": 240,
        "wires": [
            [
                "ffe8aa3a0e2699d5",
                "594226efd94caaa1"
            ]
        ]
    },
    {
        "id": "594226efd94caaa1",
        "type": "debug",
        "z": "34281662102cb5c8",
        "name": "debug 9",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2040,
        "y": 300,
        "wires": []
    },
    {
        "id": "4e8ea023ad79ed60",
        "type": "inject",
        "z": "34281662102cb5c8",
        "g": "adf09ee18b9bbecd",
        "name": "SetDelay",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.2",
        "topic": "",
        "payload": "config.command_delay",
        "payloadType": "flow",
        "x": 1240,
        "y": 220,
        "wires": [
            [
                "7e2465433450cad7"
            ]
        ]
    }
]